section {
  padding-top: 30px;
}

.service {
  padding-bottom: 200px;

  &__title {
    font-size: 24px;
    color: #333;
    //메인 제목 컬러
    // color: $main-font-color;
    letter-spacing: -0.54px;
  }
}

.picture {
  &__box {
    display: flex;
    align-items: center;
    //선언된 Mixin을 사용(포함)하기 위해서는 @include가 필요합니다.
    //  @include flex-center();
    gap: 20px;

    &__item {
      width: 100%;
      height: 300px;
      //   @include height(300px);
      border-radius: 10px;
      box-shadow: 0 1px 20px rgba(0, 0, 0, 0.1);
      background-size: cover;
      background-repeat: no-repeat;
      background-position: center;

      &.cat {
        background-image: url("~/assets/images/animal-cat.jpg");
      }

      &.dog {
        background-image: url("~/assets/images/animal-dog.jpg");
      }

      &.rabbit {
        background-image: url("~/assets/images/animal-rabbit.jpg");
      }

      /* 
      $변수: ()
      변수는 사용 가능한 유효범위가 있습니다.
      선언된 블록({}) 내에서만 유효범위를 가집니다.

      @each는 List와 Map 데이터를 반복할 때 사용합니다.
      for in 문과 유사합니다.

      @each $변수 in 리스트 또는 맵 데이터 {
        반복 내용
      }
      */

      //   $animals: ("cat", "dog", "rabbit");

      //   @each $animal in $animals {
      //     &.#{$animal} {
      //       background-image: url("~/assets/images/animal-#{$animal}.jpg");
      //     }
      //   }
    }
  }
}

.content {
  &__box {
    display: flex;
    align-items: center;
    //  @include flex-center();
    gap: 20px;
    flex-wrap: wrap;

    &__item {
      width: 100%;
      height: 200px;
      //@include 포함 단계에서 별도의 인수가 전달되지 않으면 기본값이 사용됩니다.
      //   @include height();
      border-radius: 10px;
      box-shadow: 0 1px 20px rgba(0, 0, 0, 0.1);
      background-repeat: no-repeat;
      padding: 20px 30px;
      box-sizing: border-box;
      background-size: auto 200px;
      background-position: 90%;

      p {
        font-size: 26px;
        font-weight: bold;
        letter-spacing: -2px;
      }

      span {
        font-size: 16px;
        font-weight: 500;
        margin-top: 10px;
        display: inline-block;
        letter-spacing: -0.24px;
      }

      &:nth-child(1) {
        background-color: rgb(216, 226, 248);
        background-image: url("~/assets/images/content-1.png");
      }

      &:nth-child(2) {
        background-color: rgb(224, 224, 247);
        background-image: url("~/assets/images/content-2.png");
      }

      &:nth-child(3) {
        background-color: rgb(230, 241, 227);
        background-image: url("~/assets/images/content-3.png");
      }

      /*
      @for는 스타일을 반복적으로 출력합니다.
      for 문과 유사합니다.

      <through>
      종료 만큼 반복
      @for $변수 from 시작 through 종료 {
        // 반복 내용
      }

      <to>
      종료 직전까지 반복
      @for $변수 from 시작 to 종료 {
        // 반복 내용
      }
      */

      // 1부터 3번 반복
      //   @for $i from 1 through 3 {
      //     &:nth-child(#{$i}) {
      //       background-image: url("~/assets/images/content-#{$i}.png");
      //     }
      //   }

      // 1부터 3 직전까지만 반복(2번 반복)
      //   @for $i from 1 to 3 {
      //     &:nth-child(#{$i}) {
      //       background-image: url("~/assets/images/content-#{$i}.png");
      //     }
      //   }

      /* 
      @each index값이 필요할 경우 내장 함수 문법 코드
      */

      //   $colors: (rgb(216, 226, 248), rgb(224, 224, 247), rgb(230, 241, 227));

      //   @each $color in $colors {
      //     $i: index($colors, $color);
      //     &:nth-child(#{$i}) {
      //       background-color: $color;
      //       background-image: url("~/assets/images/content-#{$i}.png");
      //     }
      //   }
    }
  }
}

.user {
  font-size: 20px;

  hr {
    margin-top: 30px;
    display: block;
  }

  &__name {
    &.active {
      color: green;
    }
  }

  &__age {
    &.active {
      color: purple;
    }
  }
}
